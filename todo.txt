Data Sources
- Canvec WMS
- BC DEM -> Hillshade
- BC Topo Maps 1:20000
- Google / Bing
    - if URL provided, otherwise Canvec all the way down
- Resource Roads
- Trails
    - integrate from InReach
    - check BVSAR KML for non-duplicates
- Cabins
- Transmission Lines
    - only when overlaid on non-Canvec, as Canvec already shows transmission lines
- ATES terrain (check impact on vis)

    Possible Data Sources
    - Look for data on old mining roads
    - Snowmobile club trails
    - Google Earth's peaks

Approach Notes
- Environmental variable determines whether existing files are used or replaced - this is how updates vs additions are managed
    - Could be source-specific, if one source is known to have not updated like Google imagery
- Source data grouped into directories showing year of acquisition
- Outlines of cached areas should be visible at zoom-level 1
    - Add a new outline as part of data build
    - Only add if new outline is not completely contained within another outline
        - Expand existing outline if it intersects
- SARM team wants logging roads / trails visible at more zoom levels
- Generated content (from tilemill and merged Google / Bing) always generated fresh, overwrite existing
- Consider moving trails and cabins to a geopackage and generating .shp at generation time
    - Combine trail name and type abbreviation in export while keeping type denormalised
- WMS retriever should use separate types for ImageRequirement and PartialCoverageTile as they are different things
- need some consistency in class file names, classes having their own files
- combined util.py and file.py and choose better home for util

Hosting
- Raspberry Pi should only require 1.2A if no peripherals
- Battery pack may be more reliable / simpler than car charger with UPS
    - check how much battery power can be expected
    - webpage could show remaining battery
    - e.g. Pi Juice
- Ruggedised case could be appropriate
- External wifi antenna may be necessary for a good signal when broadcasting

HTTP
- expand on heuristics to periodically check if we still have the optimal concurrency
- attempt to accommodate 429 "too many requests"
